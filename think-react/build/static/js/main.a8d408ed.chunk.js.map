{"version":3,"sources":["components/3DGraph/3DGraph.js","components/dashboard/dashboardContent/dashboardContent.js","components/dashboard/layout/layout.js","components/dashboard/dashboard.js","router/AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["Graph","props","state","yaskawa1","width","$","ajax","url","type","dataType","then","response","yaskawaHistory","slice","map","record","index","setState","JSON","parse","console","log","this","getYaskawa1Data","window","addEventListener","innerWidth","height","innerHeight","className","data","name","x","y","z","mode","marker","color","size","useResizeHandler","style","layout","autosize","title","text","font","family","showlegend","paper_bgcolor","margin","t","b","l","r","scene","bgcolor","xaxis","showgrid","showticklabels","showbackground","backgroundcolor","showaxeslabels","yaxis","zaxis","camera","eye","up","center","React","Component","DashboardContent","Layout","content","Dashboard","AppRouter","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8d408ed.chunk.js","sourcesContent":["import React from 'react'\nimport Plot from 'react-plotly.js';\nimport axios from 'axios';\nimport $ from 'jquery'\nimport './3DGraph.css'\nimport sizeMe from 'react-sizeme'\n\n\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props)\n\n\n    this.state = {\n      yaskawa1: [],\n      width: \"10%\"\n    }\n\n\n  }\n\n  getYaskawa1Data() {\n    $.ajax({\n      url: 'https://aipm-gsc-nodered.mybluemix.net/yaskawaHistory',\n      type: 'GET',\n      dataType: 'json',\n\n    }).then(response => {\n\n\n      response.yaskawaHistory.slice(0, 10).map((record, index) => {\n        this.setState({\n          yaskawa1: [...this.state.yaskawa1, JSON.parse(record)]\n        })\n        // return JSON.parse(record)\n      })\n\n      console.log(this.state.yaskawa1)\n\n    })\n\n  }\n\n  componentDidMount() {\n    this.getYaskawa1Data()\n\n    window.addEventListener('resize', () => {\n      this.setState({\n        width: window.innerWidth/4.6,\n        height: window.innerHeight/3\n      })\n    })\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"Graph-Container\">\n        <Plot\n          data={[\n            {\n              name: \"Yaskawa Position\",\n              x: [1, 2, 3, 10, 22],\n              y: [5, 12, 18, 25, 30],\n              z: [10, 12, 12, 15, 20],\n              type: 'scatter3d',\n              mode: 'markers',\n              marker: {\n                color: [\n                  'rgba(251,51,129,1)',\n                  'rgba(251,51,129,.7)',\n                  'rgba(251,51,129,.5)',\n                  'rgba(251,51,129,.3)',\n                  'rgba(251,51,129,.1)'\n                ],\n                size: '5',\n                // symbol: ['circle-open', 'circle-open','circle-open','circle-open', 'circle']\n              },\n\n\n            },\n            // {\n            //   name: \"Current Point\",\n            //   x: [5, 10, 15, 20, 30],\n            //   y: [10, 20, 30, 35, 40],\n            //   z: [4, 9, 12, 16, 20],\n            //   type: 'scatter3d',\n            //   opacity: '1',\n            //   mode: 'lines',\n            //   marker: { \n            //     color: '#56D679',\n            //     size: '0' \n            //    }\n            // }\n          ]}\n          useResizeHandler={true}\n          style={{height: this.state.height, width: this.state.width}}\n          layout={{\n            // width: 300,\n            // height: 300,\n            autosize: true,\n            title: {\n              text: \"Position\",\n              x: '.05',\n              y: '.97',\n              font: {\n                size: '22',\n                color: '#A4A4A4',\n                family: 'IBMPlexSans'\n              }\n            },\n            showlegend: false,\n            paper_bgcolor: '#252525',\n            margin: {\n              t: \"10\",\n              b: \"10\",\n              l: \"10\",\n              r: \"10\"\n            },\n            scene: {\n              bgcolor: \"#252525\",\n              xaxis: {\n                title: {\n                  text: \"\"\n                },\n                showgrid: false,\n                showticklabels: false,\n                showbackground: true,\n                backgroundcolor: \"rgba(37,37,37,.2)\",\n                showaxeslabels: false\n                // visible: false\n              },\n              yaxis: {\n                title: {\n                  text: \"\"\n                },\n                showbackground: true,\n                backgroundcolor: \"rgba(37,37,37,.5)\",\n                showgrid: false,\n                showticklabels: false,\n                showaxeslabels: false\n                // visible: false\n              },\n              zaxis: {\n                title: {\n                  text: \"\"\n                },\n                showbackground: true,\n                backgroundcolor: \"rgba(37,37,37,.9)\",\n                showgrid: false,\n                showticklabels: false,\n                showaxeslabels: false\n                // visible: false\n              },\n              camera: {\n                eye: {\n                  x: 1.5,\n                  y: 1.5,\n                  z: .5\n                },\n                up: {\n                  x: 0,\n                  y: 0,\n                  z: 1\n                },\n                center: {\n                  x: 0,\n                  y: 0,\n                  z: 0\n                }\n              }\n            }\n          }}\n        />\n      </div>\n    )\n  }\n\n}\n\nexport default Graph;","import React, { Component } from 'react';\nimport './dashboardContent.css';\nimport Graph from '../../3DGraph/3DGraph'\n\nclass DashboardContent extends Component {\n    render() {\n        return (\n            // <p>this is also stupid</p> \n            // <p>what do u mean lol</p>\n            <div className=\"contents-container\">\n                <div className=\"r1-row robot-col card-padding\">Robot 1</div>\n                <div className=\"r1-row robot-health card-padding card-color\">Robot Health</div>\n                <div className=\"r1-row position card-padding card-color\">\n                    <Graph />\n                </div>\n                <div className=\"j1-j2-j3-r1 j1-j4-col\">s</div>\n                <div className=\"j1-j2-j3-r1 j2-j5-col\">l</div>\n                <div className=\"j1-j2-j3-r1 j3-j6-col\">r</div>\n                <div className=\"j4-j5-j6-r1 j1-j4-col\">b</div>\n                <div className=\"j4-j5-j6-r1 j2-j5-col\">t</div>\n                <div className=\"j4-j5-j6-r1 j3-j6-col\">u</div>\n                <div className=\"gap-line\">line</div>\n                <div className=\"r2-row robot-col card-padding\">Robot 2</div>\n                <div className=\"r2-row robot-health card-padding card-color\">Robot Health</div>\n                <div className=\"r2-row position card-padding card-color\">Position</div>\n                <div className=\"j1-j2-j3-r2 j1-j4-col\">s</div>\n                <div className=\"j1-j2-j3-r2 j2-j5-col\">l</div>\n                <div className=\"j1-j2-j3-r2 j3-j6-col\">r</div>\n                <div className=\"j4-j5-j6-r2 j1-j4-col\">b</div>\n                <div className=\"j4-j5-j6-r2 j2-j5-col\">t</div>\n                <div className=\"j4-j5-j6-r2 j3-j6-col\">u</div>\n            </div>\n        );\n    }\n}\n\nexport default DashboardContent;","import React, { Component } from 'react';\n// import ScreenContents from './ScreenContents/screenContents';\nimport DashboardContent from '../dashboardContent/dashboardContent';\nimport './layout.css';\n\nclass Layout extends Component {\n    render() {\n        console.log(this.props.content);\n        return (\n            <div className=\"layout-grid\">\n                <div className=\"header\">IBM header</div>\n                <div className=\"below-header\"></div>\n                <div className=\"left-col\">\n                    {/* <DashboardContent />  */}\n                </div>\n                <div className=\"main-content\">\n                    <DashboardContent />\n                    {/* <ScreenContents>\n                        {this.props.content}\n                    </ScreenContents> */}\n\n                </div>\n                <div className=\"right-col\"></div>\n                <div className=\"footer\">footer</div>\n            </div>\n        );\n    }\n}\n\nexport default Layout;","import React, {Component} from 'react';\nimport Layout from './layout/layout';\nimport DashboardContent from './dashboardContent/dashboardContent';\n\nclass Dashboard extends Component{\n\nrender(){\n    let cont = <p>Content1</p>\n    return(\n        <Layout></Layout>\n        \n        // content={DashboardContent}\n    \n    );\n}\n}\n\nexport default Dashboard;","import React, { Component } from \"react\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Dashboard from \"../components/dashboard/dashboard\";\n\n\nclass AppRouter extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Dashboard} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default AppRouter;\n","import React,{Component} from \"react\";\nimport AppRouter from \"./router/AppRouter\";\nimport \"./styles/App.css\";\n\n// IN THIS FILE :\n// a. site wide styles\n// b. site wide settings such Redux, etc.\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <AppRouter />\n//     </div>\n//   );\n// } \n\nclass App extends Component {\n\n  \n\n  render(){\n    return (\n      <div className=\"App\">\n        <AppRouter />\n      </div>\n    );\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport request from 'request';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// ///////////////////////////\n\n// process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\"\n\n// //const request = require('request');\n\n// var username = \"admin\",\n\n//     password = \"Net@pp123!\",\n\n//     uuid = \"7a085276-b793-11e9-b3a4-00a0b89c650c\",\n\n//     url = \"https://aipm-gsc-nodered.mybluemix.net/getVolumes\"\n\n\n// console.log(\"HEREEE\");\n\n \n\n// request(url, { method : 'GET', json: true }, function (err, res, body) {\n\n//   if (err) { return console.log(\"err\",err); }\n\n//   console.log(\"BODY\",body);\n\n//   console.log(res.headers);\n\n//   console.log(res.statusCode);\n\n// });\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}