{"version":3,"sources":["components/screens/persona/index.js","components/screens/predictive-maintenance/index.js","components/common-ui/persona-header/persona-header.js","components/common-ui/persona-time/persona-time.js","components/common-ui/robot-list/robot-list.js","components/common-ui/Aux/Aux.js","components/screens/visual-insights/visual-insights-dashboard/vidashboard.js","components/screens/visual-insights/index.js","router/AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["Persona","react_default","a","createElement","react_router_dom","to","Component","PredictiveMaintenance","header","props","className","role","personatime","name","robotList","device","overview","map","r","key","value","onClick","clickHandler","aux","children","videtails","viImg","this","imgMsg","Aux","robot","src","scoreMsg","VisualInsights","state","viDashboard","robotEnvironment","webSocketHandler","ws","wsUri","console","log","WebSocket","onmessage","event","msg","JSON","parse","data","payload","slot","_this","type","setState","image","toString","speakingClassification","onopen","onclose","setTimeout","robotClickHandler","target","viContent","vidashboard","persona_time_persona_time","style","border","padding","margin","robot_list_robot_list","persona_header_persona_header","AppRouter","react_router","exact","path","component","App","router_AppRouter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.815c5560.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Persona extends Component {\n  render() {\n    return (\n      <div>\n        <div>Person screen</div>\n        <li>\n          <Link to=\"/pm\">\n            <button>GO to PM</button>\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/vi\">\n            <button>GO to VI</button>\n          </Link>\n        </li>\n      </div>\n    );\n  }\n}\n\nexport default Persona;\n","import React, { Component } from \"react\";\n\nclass PredictiveMaintenance extends Component {\n  render() {\n    return <div> PredictiveMaintenance </div>;\n  }\n}\n\nexport default PredictiveMaintenance;\n","import React from 'react';\nimport './persona-header.css';\nimport { Link } from 'react-router-dom';\n\nconst header = (props) => (\n    <div className=\"Header\">\n        <Link to=\"/\">\n            <div>\n                <button>arrow</button>\n            </div>\n        </Link>\n        <div>{props.role}</div>\n    </div>\n);\n\nexport default header;\n\n","import React from 'react';\nimport './persona-time.css';\n\nconst personatime = (props) => {\n\n    return (\n        <div className=\"Persona-time\">\n            <div>Good-morning {props.name}</div>\n            <div>Local Time, Date</div>\n            <div>Weather and Weather Event</div>\n        </div>\n    );\n\n}\n\nexport default personatime;","import React from 'react';\nimport './robot-list.css';\nimport { Link } from \"react-router-dom\";\n\nconst robotList = (props) => {\n    const robots = [\n        { device: \"Yaskawa001\", overview: \" Yaskawa Overview\" },\n        { device: \"Kuka-lbr\", overview: \" Kuka Overview\" },\n        { device: \"Replay\", overview: \" Replay Overview\" }\n    ]\n\n    let robotList = robots.map(r => {\n        return (\n            <div className=\"Robot\" key={r.device}>\n                <div>{r.device}</div>\n                <div>{r.overview}</div>\n                {/* <Link to=\"/pm\"> */}\n                    <button value={r.device} onClick={props.clickHandler}>Details</button>\n                {/* </Link> */}\n                {/* <button onClick={props.onclick}>Details</button> */}\n            </div>\n        );\n    })\n\n    return (\n        <div className=\"Robot-list\">\n            {robotList}\n        </div>\n    );\n}\n\nexport default robotList;","import React from 'react';\n\nconst aux = (props) => {\n    return props.children;\n}\n\nexport default aux;","import React, { Component } from 'react';\nimport Aux from '../../../common-ui/Aux/Aux';\n\nclass videtails extends Component {\n    render(props) {\n        let viImg = \"url(data:image/jpeg;base64,\"+this.props.imgMsg+\")\";\n        return (\n            <Aux>\n                <div>{this.props.robot}</div>\n                <div>image:\n                    <img src={viImg}/>\n                </div>\n                <div>Score:\n                    <div>{this.props.scoreMsg}</div>\n                </div>\n            </Aux>\n        );\n    }\n}\n\nexport default videtails;","import React, { Component } from 'react';\nimport Header from '../../common-ui/persona-header/persona-header';\nimport PersonaTime from '../../common-ui/persona-time/persona-time';\nimport RobotList from '../../common-ui/robot-list/robot-list';\nimport Aux from '../../common-ui/Aux/Aux';\nimport VIdashboard from './visual-insights-dashboard/vidashboard';\nimport './vi.css';\n\nclass VisualInsights extends Component {\n\n    // loadVI = () => {\n\n    // }\n    state = {\n        viDashboard: false,\n        robotEnvironment: null,\n        imgMsg: null,\n        scoreMsg: null\n    }\n\n    webSocketHandler = () => {\n        let ws;\n        let wsUri = \"wss://aipm-gsc-nodered.mybluemix.net/ws/aipm-gsc\";\n        console.log(\"connect: \", wsUri);\n        ws = new WebSocket(wsUri);\n\n        ws.onmessage = (event) => {\n            // parse the incoming message as a JSON object\n            let msg = JSON.parse(event.data);\n            console.log(\"ws received:\" + msg);\n            console.log(\"ws msg.payload.slot:\" + msg.payload.slot);\n\n            // Process different message either image or scoring //\n\n            if (this.state.viDashboard === true && (this.state.robotEnvironment === msg.payload.robotEnvironment)) {\n                // if(this.state.robotEnvironment === msg.payload.robotEnvironment){\n\n                if (msg.payload.type === \"image\") {\n                    // console.log(\"ws image msg.payload.type: \" + msg.payload.type);\n                    // console.log(\"ws image msg.payload.slot=\" + msg.payload.slot);\n                    // console.log(\"ws image msg.payload.robotEnvironment=\" + msg.payload.robotEnvironment);\n\n                    // if (msg.payload.robotEnvironment === \"yaskawa001\") {\n                    //     // myimgslot = \"1\";\n                    // } else if (msg.payload.robotEnvironment === \"replay\") {\n                    //     // myimgslot = \"3\";\n                    // }\n                    this.setState({\n                        imgMsg: msg.payload.image.toString()\n                    });\n                }\n                // if score, update other div elements\n                if (msg.payload.type === \"scoring\") {\n                    console.log(msg.payload.speakingClassification);\n                    this.setState({\n                        scoreMsg: msg.payload.speakingClassification\n                    });\n\n                }\n                // }\n\n            }\n\n\n        }\n\n\n\n        ws.onopen = () => {\n            console.log(\"connected\");\n        }\n        ws.onclose = () => {\n            setTimeout(this.webSocketHandler, 3000);\n        }\n    }\n\n    robotClickHandler = (event) => {\n        this.setState({\n            viDashboard: true,\n            robotEnvironment: event.target.value\n        });\n        console.log(event.target.value);\n    }\n\n    render() {\n        const temp_style = {\n            border: \"1px solid green\",\n            padding: \"10px\",\n            margin: \"10px\"\n        }\n        this.webSocketHandler();\n\n        let viContent = \"\";\n\n        if (this.state.viDashboard) {\n            viContent =\n                <VIdashboard\n                    robot={this.state.robotEnvironment}\n                    imgMsg = {this.state.imgMsg}\n                    scoreMsg = {this.state.scoreMsg} />\n        } else {\n            viContent =\n                <Aux>\n                    <div className=\"persona-section\">\n                        <PersonaTime name=\"Carla\" />\n                        <div style={temp_style}> Assigned to line 3 today</div>\n                    </div>\n                    <RobotList clickHandler={this.robotClickHandler} />\n                </Aux>\n        }\n\n        return (\n\n            <div className=\"VisualInsights\" >\n                <Header role=\"Line Manager Dashboard\" />\n                {viContent}\n                {/* <div className=\"RobotList\">\n                    <div>gm Carla</div>\n                    <div>QA</div>\n                </div> */}\n                {/* <RobotList onclick={this.loadVI}/> */}\n            </div>\n\n        );\n    }\n}\n\nexport default VisualInsights;\n","import React, { Component } from \"react\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Persona from \"../components/screens/persona\";\nimport PredictiveMaintenance from \"../components/screens/predictive-maintenance\";\nimport VisualInsights from \"../components/screens/visual-insights\";\n\nclass AppRouter extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Persona} />\n          <Route path=\"/pm\" component={PredictiveMaintenance} />\n          <Route path=\"/vi\" component={VisualInsights} />\n          {/* <Route path=\"/contact\" component={Contact} />\n          <Route component={Notfound} /> */}\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default AppRouter;\n","import React from \"react\";\nimport AppRouter from \"./router/AppRouter\";\nimport \"./styles/App.css\";\n\n// IN THIS FILE :\n// a. site wide styles\n// b. site wide settings such Redux, etc.\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}