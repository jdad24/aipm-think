{"version":3,"sources":["components/screens/persona/index.js","components/screens/predictive-maintenance/index.js","components/common-ui/persona-header/persona-header.js","components/common-ui/persona-time/persona-time.js","components/common-ui/robot-list/robot-list.js","components/common-ui/Aux/Aux.js","components/screens/visual-insights/visual-insights-details/videtails.js","components/screens/visual-insights/index.js","router/AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["Persona","react_default","a","createElement","react_router_dom","to","Component","PredictiveMaintenance","header","props","className","role","personatime","name","robotList","overview","map","r","key","value","onClick","clickHandler","aux","children","videtails","this","robot","VisualInsights","state","viDetails","robotClickHandler","event","_this","setState","target","console","log","viContent","visual_insights_details_videtails","Aux","persona_time_persona_time","style","border","padding","margin","robot_list_robot_list","persona_header_persona_header","AppRouter","react_router","exact","path","component","App","router_AppRouter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e230dd7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Persona extends Component {\n  render() {\n    return (\n      <div>\n        <div>Person screen</div>\n        <li>\n          <Link to=\"/pm\">\n            <button>GO to PM</button>\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/vi\">\n            <button>GO to VI</button>\n          </Link>\n        </li>\n      </div>\n    );\n  }\n}\n\nexport default Persona;\n","import React, { Component } from \"react\";\n\nclass PredictiveMaintenance extends Component {\n  render() {\n    return <div> PredictiveMaintenance </div>;\n  }\n}\n\nexport default PredictiveMaintenance;\n","import React from 'react';\nimport './persona-header.css';\nimport { Link } from 'react-router-dom';\n\nconst header = (props) => (\n    <div className=\"Header\">\n        <Link to=\"/\">\n            <div>\n                <button>arrow</button>\n            </div>\n        </Link>\n        <div>{props.role}</div>\n    </div>\n);\n\nexport default header;\n\n","import React from 'react';\nimport './persona-time.css';\n\nconst personatime = (props) => {\n\n    return (\n        <div className=\"Persona-time\">\n            <div>Good-morning {props.name}</div>\n            <div>Local Time, Date</div>\n            <div>Weather and Weather Event</div>\n        </div>\n    );\n\n}\n\nexport default personatime;","import React from 'react';\nimport './robot-list.css';\nimport { Link } from \"react-router-dom\";\n\nconst robotList = (props) => {\n    const robots = [\n        { name: \"Yaskawa\", overview: \" Yaskawa Overview\" },\n        { name: \"Kuka\", overview: \" Kuka Overview\" },\n        { name: \"Replay\", overview: \" Replay Overview\" }\n    ]\n\n    let robotList = robots.map(r => {\n        return (\n            <div className=\"Robot\" key={r.name}>\n                <div>{r.name}</div>\n                <div>{r.overview}</div>\n                {/* <Link to=\"/pm\"> */}\n                    <button value={r.name} onClick={props.clickHandler}>Details</button>\n                {/* </Link> */}\n                {/* <button onClick={props.onclick}>Details</button> */}\n            </div>\n        );\n    })\n\n    return (\n        <div className=\"Robot-list\">\n            {robotList}\n        </div>\n    );\n}\n\nexport default robotList;","import React from 'react';\n\nconst aux = (props) => {\n    return props.children;\n}\n\nexport default aux;","import React, { Component } from 'react';\n\nclass videtails extends Component {\n    render(){\n        return(\n            <div>{this.props.robot}</div>\n        );\n    }\n}\n\nexport default videtails;","import React, { Component } from 'react';\nimport Header from '../../common-ui/persona-header/persona-header';\nimport PersonaTime from '../../common-ui/persona-time/persona-time';\nimport RobotList from '../../common-ui/robot-list/robot-list';\nimport Aux from '../../common-ui/Aux/Aux';\nimport VIdetails from './visual-insights-details/videtails';\nimport './vi.css';\n\nclass VisualInsights extends Component {\n\n    // loadVI = () => {\n\n    // }\n    state = {\n        viDetails: false,\n        robot: null\n    }\n\n    robotClickHandler = (event) => {\n        this.setState({\n            viDetails: true,\n            robot: event.target.value\n        });\n        console.log(event.target.value);\n    }\n\n    render() {\n        const temp_style = {\n            border: \"1px solid green\",\n            padding: \"10px\",\n            margin: \"10px\"\n        }\n\n        let viContent = \"\";\n\n        if (this.state.viDetails) {\n            viContent = <VIdetails robot={this.state.robot} />\n        } else {\n            viContent =\n                <Aux>\n                    <div className=\"persona-section\">\n                        <PersonaTime name=\"Carla\" />\n                        <div style={temp_style}> Assigned to line 3 today</div>\n                    </div>\n                    <RobotList clickHandler={this.robotClickHandler} />\n                </Aux>\n        }\n\n        return (\n\n            <div className=\"VisualInsights\" >\n                <Header role=\"Line Manager Dashboard\" />\n                {viContent}\n                {/* <div className=\"RobotList\">\n                    <div>gm Carla</div>\n                    <div>QA</div>\n                </div> */}\n                {/* <RobotList onclick={this.loadVI}/> */}\n            </div>\n\n        );\n    }\n}\n\nexport default VisualInsights;\n","import React, { Component } from \"react\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Persona from \"../components/screens/persona\";\nimport PredictiveMaintenance from \"../components/screens/predictive-maintenance\";\nimport VisualInsights from \"../components/screens/visual-insights\";\n\nclass AppRouter extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Persona} />\n          <Route path=\"/pm\" component={PredictiveMaintenance} />\n          <Route path=\"/vi\" component={VisualInsights} />\n          {/* <Route path=\"/contact\" component={Contact} />\n          <Route component={Notfound} /> */}\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default AppRouter;\n","import React from \"react\";\nimport AppRouter from \"./router/AppRouter\";\nimport \"./styles/App.css\";\n\n// IN THIS FILE :\n// a. site wide styles\n// b. site wide settings such Redux, etc.\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}