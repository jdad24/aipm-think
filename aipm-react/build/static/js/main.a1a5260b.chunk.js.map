{"version":3,"sources":["components/screens/persona/index.js","components/screens/predictive-maintenance/index.js","components/common-ui/persona-header/persona-header.js","components/common-ui/persona-time/persona-time.js","components/common-ui/robot-list/robot-list.js","components/common-ui/Aux/Aux.js","components/screens/visual-insights/visual-insights-dashboard/vidashboard.js","components/screens/visual-insights/index.js","router/AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["Persona","react_default","a","createElement","react_router_dom","to","Component","PredictiveMaintenance","header","props","className","role","personatime","name","robotList","device","overview","map","r","key","value","onClick","clickHandler","aux","children","videtails","mystyle","backgroundImage","this","imgMsg","backgroundRepeat","Aux","robot","style","VisualInsights","state","viDashboard","robotEnvironment","scoreMsg","webSocketHandler","ws","wsUri","console","log","WebSocket","onmessage","event","msg","JSON","parse","data","_this","payload","type","roboImg","image","toString","setState","onopen","onclose","setTimeout","robotClickHandler","target","viContent","vidashboard","persona_time_persona_time","border","padding","margin","robot_list_robot_list","persona_header_persona_header","AppRouter","react_router","exact","path","component","App","router_AppRouter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1a5260b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Persona extends Component {\n  render() {\n    return (\n      <div>\n        <div>Person screen</div>\n        <li>\n          <Link to=\"/pm\">\n            <button>GO to PM</button>\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/vi\">\n            <button>GO to VI</button>\n          </Link>\n        </li>\n      </div>\n    );\n  }\n}\n\nexport default Persona;\n","import React, { Component } from \"react\";\n\nclass PredictiveMaintenance extends Component {\n  render() {\n    return <div> PredictiveMaintenance </div>;\n  }\n}\n\nexport default PredictiveMaintenance;\n","import React from 'react';\nimport './persona-header.css';\nimport { Link } from 'react-router-dom';\n\nconst header = (props) => (\n    <div className=\"Header\">\n        <Link to=\"/\">\n            <div>\n                <button>arrow</button>\n            </div>\n        </Link>\n        <div>{props.role}</div>\n    </div>\n);\n\nexport default header;\n\n","import React from 'react';\nimport './persona-time.css';\n\nconst personatime = (props) => {\n\n    return (\n        <div className=\"Persona-time\">\n            <div>Good-morning {props.name}</div>\n            <div>Local Time, Date</div>\n            <div>Weather and Weather Event</div>\n        </div>\n    );\n\n}\n\nexport default personatime;","import React from 'react';\nimport './robot-list.css';\nimport { Link } from \"react-router-dom\";\n\nconst robotList = (props) => {\n    const robots = [\n        { device: \"yaskawa001\", overview: \" Yaskawa Overview\" },\n        { device: \"kuka-lbr\", overview: \" Kuka Overview\" },\n        { device: \"replay\", overview: \" Replay Overview\" }\n    ]\n\n    let robotList = robots.map(r => {\n        return (\n            <div className=\"Robot\" key={r.device}>\n                <div>{r.device}</div>\n                <div>{r.overview}</div>\n                {/* <Link to=\"/pm\"> */}\n                    <button value={r.device} onClick={props.clickHandler}>Details</button>\n                {/* </Link> */}\n                {/* <button onClick={props.onclick}>Details</button> */}\n            </div>\n        );\n    })\n\n    return (\n        <div className=\"Robot-list\">\n            {robotList}\n        </div>\n    );\n}\n\nexport default robotList;","import React from 'react';\n\nconst aux = (props) => {\n    return props.children;\n}\n\nexport default aux;","import React, { Component } from 'react';\nimport Aux from '../../../common-ui/Aux/Aux';\n\nclass videtails extends Component {\n    render(props) {\n        // console.log();\n        // console.log();\n        let viImg = \"url(data:image/jpeg;base64,\"+this.props.imgMsg+\")\";\n        let mystyle = {\n            backgroundImage: viImg,\n            backgroundRepeat: \"no-repeat\"\n        }\n        return (\n            <Aux>\n                <div>{this.props.robot}</div>\n                {/* <div>image:{viImg} */}\n                <div style={mystyle}>image:\n                    {/* <img src={viImg}/> */}\n                </div>\n                <div>Score:\n                    {/* <div>{this.props.scoreMsg}</div> */}\n                </div>\n            </Aux>\n        );\n    }\n}\n\nexport default videtails;","import React, { Component } from 'react';\nimport Header from '../../common-ui/persona-header/persona-header';\nimport PersonaTime from '../../common-ui/persona-time/persona-time';\nimport RobotList from '../../common-ui/robot-list/robot-list';\nimport Aux from '../../common-ui/Aux/Aux';\nimport VIdashboard from './visual-insights-dashboard/vidashboard';\nimport './vi.css';\n\nclass VisualInsights extends Component {\n\n    // loadVI = () => {\n\n    // }\n    state = {\n        viDashboard: false,\n        robotEnvironment: null,\n        imgMsg: null,\n        scoreMsg: null\n    }\n\n    webSocketHandler = () => {\n        let ws;\n        let wsUri = \"wss://aipm-gsc-nodered.mybluemix.net/ws/aipm-gsc\";\n        console.log(\"connect: \", wsUri);\n        ws = new WebSocket(wsUri);\n\n        ws.onmessage = (event) => {\n            // parse the incoming message as a JSON object\n            let msg = JSON.parse(event.data);\n            if (this.state.viDashboard === true && (this.state.robotEnvironment === msg.payload.robotEnvironment)) {\n                if (msg.payload.type === \"image\") {\n                    console.log(\"ws image msg.payload.robotEnvironment=\" + msg.payload.robotEnvironment);\n                    let roboImg = msg.payload.image.toString()\n                    this.setState({\n                        imgMsg: roboImg\n                    });\n                }\n            }\n        }\n\n        ws.onopen = () => {\n            console.log(\"connected\");\n        }\n        ws.onclose = () => {\n            setTimeout(this.webSocketHandler, 3000);\n        }\n    }\n\n    robotClickHandler = (event) => {\n        this.setState({\n            viDashboard: true,\n            robotEnvironment: event.target.value\n        });\n        console.log(event.target.value);\n    }\n\n    // MQTThandler = () => {\n    //     let mqttClient;\n    //     let mqttClient2;\n\n    //     const myMQTT = () => {\n    //         // debugger;\n    //         // robot: g:qjue4x:kukagw:lbr1 to 169.45.2.20:1883\n    //         let clientId = 'a:qjue4x:' + Math.random().toString(16).substr(2, 8);\n    //         console.log(\"clientId: \" + clientId);\n    //         // Create a client instance\n    //         mqttClient = new Paho.MQTT.Client(\n    //             \"qjue4x.messaging.internetofthings.ibmcloud.com\",\n    //             1883,\n    //             clientId);\n\n    //         // set callback handlers\n    //         mqttClient.onConnectionLost = onConnectionLost;\n    //         mqttClient.onMessageArrived = onMessageArrived1;\n\n    //         // connect the client\n    //         mqttClient.connect({\n    //             onSuccess: onConnect1,\n    //             onFailure: onFailure,\n    //             userName: \"a-qjue4x-al7mm3hvo4\",   // apikey\n    //             password: \"+4B0N)ZGk@BVH1BFy9\"\n    //         }); // apitoken\n\n    //     }\n\n    //     const myMQTT2 = () => {\n    //         // debugger;\n    //         // robot: g:qjue4x:kukagw:lbr1 to 169.45.2.20:1883\n    //         let clientId = 'a:xbyrsp:' + Math.random().toString(16).substr(2, 8);\n    //         console.log(\"clientId: \" + clientId);\n    //         // Create a client instance\n    //         mqttClient2 = new Paho.MQTT.Client(\n    //             \"xbyrsp.messaging.internetofthings.ibmcloud.com\",\n    //             1883,\n    //             clientId);\n\n    //         // set callback handlers\n    //         mqttClient2.onConnectionLost = onConnectionLost;\n    //         mqttClient2.onMessageArrived = onMessageArrived2;\n\n    //         // connect the client\n    //         mqttClient2.connect({\n    //             onSuccess: onConnect2,\n    //             onFailure: onFailure,\n    //             userName: \"a-xbyrsp-0rf3yixsqn\",   // apikey\n    //             password: \"2I+?sdkfxml_OR8SMR\"\n    //         }); // apitoken\n\n    //     }\n\n    //     // called when the client connects\n    //     const onConnect1 = () => {\n    //         // Once a connection has been made, make a subscription and send a message.\n    //         console.log(\"onConnect1\");\n    //         mqttClient.subscribe(\"iot-2/type/+/id/+/evt/+/fmt/json\");\n    //         // mqttClient.subscribe(\"iot-2/type/kukagw/id/lbr1/evt/torque/fmt/json\");\n    //     }\n\n    //     const onConnect2 = () => {\n    //         // Once a connection has been made, make a subscription and send a message.\n    //         console.log(\"onConnect2\");\n    //         mqttClient2.subscribe(\"iot-2/type/+/id/+/evt/+/fmt/json\");\n    //         // mqttClient.subscribe(\"iot-2/type/kukagw/id/lbr1/evt/torque/fmt/json\");\n    //     }\n\n    //     const onFailure = (responseObject) => {\n    //         // Once a connection has been made, make a subscription and send a message.\n    //         console.log(\"onFailure\" + JSON.stringify(responseObject));\n    //     }\n\n    //     // called when the client loses its connection\n    //     const onConnectionLost = (responseObject) => {\n    //         if (responseObject.errorCode !== 0) {\n    //             console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n    //         }\n    //     }\n\n    //     const onMessageArrived1 = (message)=> {\n    //         console.log(\"inside onMessage 1\");\n    //         onMessageArrivedCommon(message);\n    //     }\n\n    //    const onMessageArrived2 = (message) => {\n    //         console.log(\"inside onMessage 2\");\n    //         onMessageArrivedCommon(message);\n    //     }\n\n    //     // called when a message arrives\n    //    const onMessageArrivedCommon = (message) => {\n    //         debugger;\n\n    //         console.log(\"IoT received:\" + message._getDestinationName());\n    //         // console.log(\"IoT onMessageArrived:\" + message.payloadString);\n\n    //         let myTopic = message._getDestinationName();\n    //         let parsedTopic = myTopic.split(\"/\");\n    //         let deviceType = parsedTopic[2];\n    //         let deviceId = parsedTopic[4];\n    //         let cmdEvt = parsedTopic[5];\n    //         let valueCmdEvt = parsedTopic[6];\n    //         let textJson = parsedTopic[8];  // format = text or json\n    //         // console.log(\"text Json: \" + textJson + myTopic);\n    //         // for time being, ignore the text messages\n    //         if (textJson === \"json\") {\n\n\n    //             let myPayload = JSON.parse(message.payloadString);\n\n    //             if (valueCmdEvt === \"score\") {\n    //                 // document.getElementById('iotTopic1b').innerHTML = \"topic: \" + message._getDestinationName();\n    //                 // document.getElementById('iotTopic' + mySlot + 'b').innerHTML = \"topic: \" + deviceId;\n    //                 // document.getElementById('robotEnvironment' + mySlot + 'b').innerHTML = \"source: \" + deviceId;\n    //                 // document.getElementById('mySpeakingClassification' + mySlot).innerHTML = \"speaking: \" + myPayload.speakingClassification;\n    //                 // document.getElementById('myConfidence' + mySlot).innerHTML = \"confidence: \" + myPayload.confidence;\n    //                 // document.getElementById('mySlot' + mySlot).innerHTML = \"slot: \" + myPayload.slot;\n\n    //             }\n    //         }\n    //         // debugger;\n    //     }\n    // }\n\n\n    render() {\n        const temp_style = {\n            border: \"1px solid green\",\n            padding: \"10px\",\n            margin: \"10px\"\n        }\n        this.webSocketHandler();\n        // this.MQTThandler();\n\n        let viContent = \"\";\n\n        if (this.state.viDashboard) {\n            console.log(\"inside IF\");\n            console.log(this.state.imgMsg);\n            viContent =\n                <VIdashboard\n                    robot={this.state.robotEnvironment}\n                    imgMsg={this.state.imgMsg}\n                // scoreMsg = {this.state.scoreMsg} \n                />\n        } else {\n            viContent =\n                <Aux>\n                    <div className=\"persona-section\">\n                        <PersonaTime name=\"Carla\" />\n                        <div style={temp_style}> Assigned to line 3 today</div>\n                    </div>\n                    <RobotList clickHandler={this.robotClickHandler} />\n                </Aux>\n        }\n\n        return (\n\n            <div className=\"VisualInsights\" >\n                <Header role=\"Line Manager Dashboard\" />\n                {viContent}\n                {/* <div className=\"RobotList\">\n                    <div>gm Carla</div>\n                    <div>QA</div>\n                </div> */}\n                {/* <RobotList onclick={this.loadVI}/> */}\n            </div>\n\n        );\n    }\n}\n\nexport default VisualInsights;\n","import React, { Component } from \"react\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Persona from \"../components/screens/persona\";\nimport PredictiveMaintenance from \"../components/screens/predictive-maintenance\";\nimport VisualInsights from \"../components/screens/visual-insights\";\n\nclass AppRouter extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Persona} />\n          <Route path=\"/pm\" component={PredictiveMaintenance} />\n          <Route path=\"/vi\" component={VisualInsights} />\n          {/* <Route path=\"/contact\" component={Contact} />\n          <Route component={Notfound} /> */}\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default AppRouter;\n","import React from \"react\";\nimport AppRouter from \"./router/AppRouter\";\nimport \"./styles/App.css\";\n\n// IN THIS FILE :\n// a. site wide styles\n// b. site wide settings such Redux, etc.\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}